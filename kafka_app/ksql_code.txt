
// First, create Kafka stream to house incoming data

CREATE STREAM youtube_videos (
  video_id VARCHAR KEY,
  title VARCHAR,
  views INTEGER,
  comments INTEGER,
  likes INTEGER
) WITH (
  KAFKA_TOPIC = 'youtube_videos',
  PARTITIONS = 1,
  VALUE_FORMAT = 'avro'
);

// Compare changes in views/likes/comments values

CREATE TABLE youtube_changes WITH ( KAFKA_TOPIC = 'youtube_changes' ) AS 
SELECT 
  video_id, 
  latest_by_offset(title) AS title,
  latest_by_offset(comments, 2)[1] AS comments_previous,
  latest_by_offset(comments, 2)[2] AS comments_current,
  latest_by_offset(views, 2)[1] AS views_previous,
  latest_by_offset(views, 2)[2] AS views_current,
  latest_by_offset(likes, 2)[1] AS likes_previous,
  latest_by_offset(likes, 2)[2] AS likes_current
FROM YOUTUBE_VIDEOS 
GROUP BY video_id;


    
SELECT * FROM  YOUTUBE_CHANGES 
WHERE likes_previous <> likes_current
EMIT CHANGES;
    
curl https://api.telegram.org/bot<YourBOTToken>/getUpdates
chat_id: <Your telegram chat ID>

// Create stream to house outgoing data
    
CREATE STREAM telegram_outbox (
  `chat_id` VARCHAR,
  `text` VARCHAR
) WITH (
  KAFKA_TOPIC = 'telegram_outbox',
  PARTITIONS = 1,
  VALUE_FORMAT = 'avro'
);
    
    
// API links for setting up Confluent Connectors

https://api.telegram.org/bot<YourBOTToken>/getUpdates
https://api.telegram.org/bot<YourBOTToken>/sendMessage

// Testing the Telegram posting

INSERT INTO telegram_outbox  (
  `chat_id`,
  `text`
) VALUES (
  '<Your telegram chat ID>',
  'Telegram test 1'
);

CREATE STREAM youtube_changes_stream WITH (
  KAFKA_TOPIC = 'youtube_changes', 
  VALUE_FORMAT = 'avro'
);

// Edit format for the message to sent to Telegram

INSERT INTO telegram_outbox 
SELECT 
  '<Your telegram chat ID>' AS `chat_id`,
  CONCAT('likes changed ', CAST(likes_previous AS STRING), ' => ', CAST(likes_current AS STRING), ', ', title) AS `text`
FROM  YOUTUBE_CHANGES_STREAM
WHERE likes_current <> likes_previous;


INSERT INTO telegram_outbox 
SELECT 
  '6084227289' AS `chat_id`,
  CONCAT(
    title, '\n', 
    'views: ', CAST(views_previous AS STRING), ' => ', CAST(views_current AS STRING), '\n',
    'likes: ', CAST(likes_previous AS STRING), ' => ', CAST(likes_current AS STRING), '\n',
    'comments: ', CAST(comments_previous AS STRING), ' => ', CAST(comments_current AS STRING)
  ) AS `text`
FROM  YOUTUBE_CHANGES_STREAM
WHERE likes_current <> likes_previous;


// Some debug commands

SHOW QUERIES;
TERMINATE INSERTQUERY_15;